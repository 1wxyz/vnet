#!/bin/sh
##Profile Manager module profile to be source/loaded when called by vnet
[ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ] && { exit 1; }
[ "${0##*/}" == "vnet" ] || { exit 1; }

declare -gA profile_params

grep_virnet_name="^[0-9a-zA-Z]{1,}([-_]{0,1}[0-9a-zA-Z]{1,})[0-9a-zA-Z]{0,}$"
common_cfg_hostbind_dnsmasq=""
_get_common_cfg_hostbind_dnsmasq(){
    #The configuration text/contents will be stored in variable \"common_cfg_hostbind_dnsmasq\""
    common_cfg_hostbind_dnsmasq="# Tell any system-wide dnsmasq instance to make sure to bind to interfaces
# instead of listening on 0.0.0.0
# WARNING: changes to this file will get lost if ${profile_params["0.1-MAIN--VIRNET_BRIDGE"]} is removed.
bind-interfaces
except-interface=${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}"

    return $_true
}

__validate_ipv4_addr(){
    [ -n "${1}" ] && { echo "${1}" | grep -qE "^(([0-9]|[0-9]{2}|1[0-9]{2}|2[0-5][0-5])\.){3}([0-9]|[0-9]{2}|1[0-9]{2}|2[0-5][0-5]){1}$" && { return $_true; } }
    return $_false
}

__validate_ipv6_addr(){
    [ -n "${1}" ] && { echo "${1}" | grep -qE "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$" && { return $_true; } }
    return $_false
}

__expand_ipv6_addr(){
    _expand_mask=$( echo ":::::::::" | sed "s/$( echo ${1} | sed 's/[^:]//g' )//" | sed 's/:/:0/g')
    echo ${1} | sed "s/::/$_expand_mask/" | sed 's/:/ /g'
    return $_true
}

__compress_ipv6_addr(){
    #echo ${1} | sed "s/::/$_expand_mask/" | sed 's/:/ /g' 
    #arg_bak=${#}
    _ipv6_blocks=($( echo ${1} | grep -o "[0-9a-fA-F]\+" | sed 's/^/0x/g' ))
    _ipv6_compr=$(printf '%x:' ${_ipv6_blocks[@]} | sed 's/:$//g')	#All leading zeros removed (if found)
    _ipv6_compr=:$_ipv6_compr

    for p in :0:0:0:0:0:0:0:0 \
	    :0:0:0:0:0:0:0 \
	    :0:0:0:0:0:0 \
	    :0:0:0:0:0 \
	    :0:0:0:0 \
	    :0:0:0 \
	    :0:0; do
    	test=a
	if [ -n $(echo ${_ipv6_compr} | grep -qs $p)]; then
		_ipv6_compr=$(echo $_ipv6_compr | sed "s/$p/::/")
		_ipv6_compr=$(echo $_ipv6_compr | sed 's/:::/::/')
	fi
    done

    echo $_ipv6_compr | sed 's/^://g'
    return $_true
}

__beautify_config_section_header(){
    echo "### $(echo ${1%%--*} | cut -d "-" -f2 | sed 's/_/ /g') ###\n";
}

_validated_ipv4_network=""
_validated_ipv4_hostnum=""
_validated_ipv4_ip_start=""
_validated_ipv4_ip_end=""
_validated_ipv6_network=""
_validated_ipv6_hostnum=""
_validated_ipv6_ip_start=""
_validated_ipv6_ip_end=""
__validate_network_address(){
    ## #1 - variable with net/cidr to validate, #2 - empty/null: validate given ip with the network mask provided, 1:generate gw ip for networki
    ## Currently works for subnet value up to 30 for IPv4
    # validate ipv4 network
    [ $( echo ${1%%/*} | grep "\.") ] && { 
	#unset _tmp_netmask_validated
    	_tmp_ipv4_2_process=($( echo ${1%%/*} | sed 's/\./ /g' ))
	_tmp_netmask=($(_cidr2netmask ${1##*/} | sed 's/\./ /g'))
	for ((a=0; a < ${#_tmp_netmask[@]}; a++)) do
		_tmp_ipv4_2_process[$a]=$((_tmp_ipv4_2_process[$a] & _tmp_netmask[$a]))
		[ ${a} == $(( ${#_tmp_netmask[@]} - 1 )) ] && { _tmp_ipv4_start=$(( _tmp_ipv4_2_process[$a] + 1 )); }	#first IP
		if [ $(( 255 - ${_tmp_netmask[$a]} )) == 0 ]; then
			_tmp_ipv4_last_2_proc[$a]=${_tmp_ipv4_2_process[$a]}
		elif [ $(( 255 - ${_tmp_netmask[$a]} )) == 255 ]; then
			_tmp_ipv4_last_2_proc[$a]=254
		else
			[ ${a} == $(( ${#_tmp_netmask[@]} - 1 )) ] && { _tmp_minus_value=1; } || { _tmp_minus_value=0; }
			_tmp_ipv4_last_2_proc[$a]=$(( 255 - ${_tmp_netmask[$a]} + ${_tmp_ipv4_2_process[$a]} - $_tmp_minus_value )) 
		fi
	done
	_tmp_validated_ipv4=$(echo ${_tmp_ipv4_2_process[@]} | sed 's/ /\./g')
	_validated_ipv4_network=${_tmp_validated_ipv4}/${1##*/}
	_validated_ipv4_hostnum=$((2**(32-${1##*/}) - 2))
	_validated_ipv4_ip_start="$(echo $_tmp_validated_ipv4 | sed 's/\.[0-9]*$/\.'"${_tmp_ipv4_start}"'/g')"
	_validated_ipv4_ip_end="$(echo ${_tmp_ipv4_last_2_proc[@]} | sed 's/ /\./g')"
	return $_true;
    }
    
    # validate ipv6 network 
    [ $( echo "${1%%/*}" | grep ":") ] && {
	_tmp_ipv6_2_process=($( __expand_ipv6_addr ${1%%/*}) )
	
	_tmp_args=${@}	#Backup current args
	# Calculate the mask value for each section of ipv6 -- Begin
	MASK_A="$(( 9 - ( ${1##*/} / 16 ) )) 65535 65535 65535 65535 65535 65535 65535 65535"
	MASK_B="$(( 255 << ( 16 - ( ${1##*/} % 16 ) )  & 65535 )) 0 0 0 0 0 0 0"
	set -- $MASK_A $MASK_B
	[ $1 -gt 1 ] && shift $1 || shift
	_tmp_netmask=(${1-0} ${2-0} ${3-0} ${4-0} ${5-0} ${6-0} ${7-0} ${8-0})
	# Calculate the mask value for each section of ipv6 -- End
	set -- $_tmp_args && unset _tmp_args	#Restore args and undefine variable

	for ((a=0; a < ${#_tmp_netmask[@]}; a++)) do
                if [ "${2}" == "1" ]; then
		    _tmp_ipv6_2_process[$a]="0x${_tmp_ipv6_2_process[$a]}"
                    [ ${a} == $(( ${#_tmp_netmask[@]} - 1 )) ] && { _tmp_ipv6_2_process[$a]=$(( _tmp_ipv6_2_process[$a] + 1 )); }
                else
		    _tmp_ipv6_2_process[$a]="0x${_tmp_ipv6_2_process[$a]}"
                    _tmp_ipv6_2_process[$a]=$((_tmp_ipv6_2_process[$a] & _tmp_netmask[$a]))
                    [ ${a} == $(( ${#_tmp_netmask[@]} - 1 )) ] && { _tmp_ipv6_start=$(( _tmp_ipv6_2_process[$a] + 1 )); } #first IP
       		if [ $(( 65535 - ${_tmp_netmask[$a]} )) == 0 ]; then
			_tmp_ipv6_last_2_proc[$a]=${_tmp_ipv6_2_process[$a]}
		elif [ $(( 65535 - ${_tmp_netmask[$a]} )) == 65535 ]; then
			_tmp_ipv6_last_2_proc[$a]=65535
		else
			#[ ${a} == $(( ${#_tmp_netmask[@]} - 1 )) ] && { _tmp_minus_value=1; } || { _tmp_minus_value=0; }
			#_tmp_ipv6_last_2_proc[$a]=$(( 65535 - ${_tmp_netmask[$a]} + ${_tmp_ipv6_2_process[$a]} - $_tmp_minus_value )) 
			_tmp_ipv6_last_2_proc[$a]=$(( 65535 - ${_tmp_netmask[$a]} + ${_tmp_ipv6_2_process[$a]})) 
		fi
         fi
        done
	#printf '%x ' ${_tmp_ipv6_2_process[@]}
	_tmp_validated_ipv6_full=$(printf '%x ' ${_tmp_ipv6_2_process[@]} | sed 's/ /\:/g' | sed 's/\:$//g')
	_tmp_validated_ipv6_neat=$(__compress_ipv6_addr ${_tmp_validated_ipv6_full})
	_validated_ipv6_network=${_tmp_validated_ipv6_neat}/${1##*/}
	_validated_ipv6_hostnum=$((2**(128-${1##*/})))
	_validated_ipv6_ip_start="$(echo $_tmp_validated_ipv6_neat | sed 's/\:[0-9a-fA-F]*$/\:'"${_tmp_ipv6_start}"'/g')"
	_validated_ipv6_ip_end="$(printf '%x ' ${_tmp_ipv6_last_2_proc[@]} | sed 's/ /\:/g' | sed 's/\:$//g')"
	_validated_ipv6_ip_end=$(__compress_ipv6_addr ${_validated_ipv6_ip_end})
	return $_true;
    }


    return $_false
}

__mac_generator(){
    _mac_rand=$(dd if=/dev/urandom bs=1 count=6 2>/dev/null )
    _mac_rand=($(echo -n ${_mac_rand[@]} | xxd -p | sed 's/.\{2\}/& /g'))
    [ ${#_mac_rand[@]} -ne 6 ] && __mac_generator
    _mac_rand[0]=$(( 16#${_mac_rand[0]} | 0x02 & 0xFE )) 
    _mac_rand[0]=$( printf "%02x" ${_mac_rand[0]} )
    _mac_rand=$(echo ${_mac_rand[@]} | sed 's/ /:/g')
    cat /sys/class/net/*/address | grep "$_mac_rand" &>/dev/null && { echo "I: MAC Address used by this system, regenerating.."; __mac_generator; }
    echo $_mac_rand 
    return $_true
}

_get_profile_config_variables(){
    # Array index format "<section order>.<variable order>-[Section_Name]--{VARIABLE_NAME}" ( -- is the separator )
    # Array value format "${value};;;'string of comments'" ( where ;;; is the separator between values and comments ) [if applicable]
    [ ${profile_params["0.1-MAIN--VIRNET_BRIDGE"]} ] || profile_params["0.1-MAIN--VIRNET_BRIDGE"]=""
    [ ${profile_params["0.2-MAIN--PERSISTENT"]} ] || profile_params["0.2-MAIN--PERSISTENT"]="true"
    [ ${profile_params["0.3-MAIN--USE_THIS_PROFILE"]} ] || profile_params["0.3-MAIN--USE_THIS_PROFILE"]="true"
    [ ${profile_params["0.4-MAIN--IS_ISOLATED_VIRNET"]} ] || profile_params["0.4-MAIN--IS_ISOLATED_VIRNET"]="false"
    [ ${profile_params["0.5-MAIN--VIRNET_BRIDGE_MAC"]} ] || profile_params["0.5-MAIN--VIRNET_BRIDGE_MAC"]=""
    [ ${profile_params["0.6-MAIN--VIRNET_IPV4_NETWORK"]} ] || profile_params["0.6-MAIN--VIRNET_IPV4_NETWORK"]=""
    [ ${profile_params["0.7-MAIN--VIRNET_IPV4_ADDR"]} ] || profile_params["0.7-MAIN--VIRNET_IPV4_ADDR"]=""
    [ ${profile_params["0.8-MAIN--VIRNET_IPV6_NETWORK"]} ] || profile_params["0.8-MAIN--VIRNET_IPV6_NETWORK"]=""
    [ ${profile_params["0.9-MAIN--VIRNET_IPV6_ADDR"]} ] || profile_params["0.9-MAIN--VIRNET_IPV6_ADDR"]=""
    [ ${profile_params["1.1-DHCP_(DNSMASQ)--VIRNET_DOMAIN"]} ] || profile_params["1.1-DHCP_(DNSMASQ)--VIRNET_DOMAIN"]=""
    [ ${profile_params["1.2-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_PING"]} ] || profile_params["1.2-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_PING"]="false"
    [ ${profile_params["1.3-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_LEASETIME"]} ] || profile_params["1.3-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_LEASETIME"]="1h"
    [ ${profile_params["1.4-DHCP_(DNSMASQ)--VIRNET_IPV4_STATIC_HOST_COUNT"]} ] || profile_params["1.4-DHCP_(DNSMASQ)--VIRNET_IPV4_STATIC_HOST_COUNT"]="0"
    [ ${profile_params["1.5-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_RANGE"]} ] || profile_params["1.5-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_RANGE"]=""
    [ ${profile_params["1.6-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_DNS_SERVERS"]} ] || profile_params["1.6-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_DNS_SERVERS"]=""
    [ ${profile_params["1.7-DHCP_(DNSMASQ)--VIRNET_IPV6_DHCP_DNS_SERVERS"]} ] || profile_params["1.7-DHCP_(DNSMASQ)--VIRNET_IPV6_DHCP_DNS_SERVERS"]=""
    [ ${profile_params["10.1-MODULE_(NET_TAP)--USE_VIRNET_BRIDGE_TAP_MODULE"]} ] || profile_params["10.1-MODULE_(NET_TAP)--USE_VIRNET_BRIDGE_TAP_MODULE"]="false"
    [ ${profile_params["10.2-MODULE_(NET_TAP)--VIRNET_BRIDGE_TAP_MODULE_MAC"]} ] || profile_params["10.2-MODULE_(NET_TAP)--VIRNET_BRIDGE_TAP_MODULE_MAC"]=""

    # dnsmasq config default format
    read -d '' config_dnsmasq << EOF
##  For help on setting up this conf file, refer to /etc/dnsmasq.conf &/or man dnsmasq  ##
##  Extra dnsmasq configuration for research bridge interface                           ##

# 44-47 NetBIOS, NetBIOS over TCP/IP
dhcp-option=44,0.0.0.0
dhcp-option=45,0.0.0.0
dhcp-option=46,8
dhcp-option=47

# Allocate static IP to these hosts below
# Example: dhcp-host=aa:bb:cc:dd:ee:ff,10.11.12.13 #vm-1

EOF
    _get_common_cfg_hostbind_dnsmasq

    return $_true
}

process_config_variables(){
    ## Function usage - ${1} , show array values ${1}=1, else ${1} null/empty (not required)
    #_get_profile_config_template_test
    _get_profile_config_variables

    unset populated_list_sorted
    unset  generated_prof_list
    #for a in "${!profile_params[@]}"; do
	#    echo $a
    #done | sort -t "." -h -k1,1 -k2,2 -k3,3

    populated_list_sorted=($(for a in "${!profile_params[@]}"; do
            echo $a
            #echo $a=\"$(echo ${profile_params["${a}"]})\"
    done | sort -t "." -h -k1,1 -k2,2 -k3,3 ))

    #echo ${populated_list_sorted[@]} | sed 's/ /\n/g'
    tmp_sect=""
    for a in ${populated_list_sorted[@]}; do
           # echo "${tmp_sect} -- $(echo ${a%%--*} | cut -d "-" -f2)"
           [[ "${tmp_sect}" == "$(echo ${a%%--*} | cut -d "-" -f2)" ]] || {
                   [ "${tmp_sect}" == "" ] &&
                   {    generated_prof_list+="$(__beautify_config_section_header $a)"; tmp_sect="$(echo ${a%%--*} | cut -d "-" -f2)"; } ||
                   {    generated_prof_list+="\n\n$(__beautify_config_section_header $a)"; tmp_sect="$(echo ${a%%--*} | cut -d "-" -f2)"; }
           }
           #echo ${profile_params["${a}"]};
           generated_prof_list+="${a#*--}=\"${profile_params["${a}"]}\"\n"
    done
    echo -e "$generated_prof_list"

    return $_true
}

question_proc_network_answers(){
    #### Mandatory - process IPv4 ####

    question_loop_check_grep "${profile_params["0.6-MAIN--VIRNET_IPV4_NETWORK"]}" "Please provide an IPv4 address for the bridge network and its mask in CIDR notation with allowable values from 8 to 30 (e.g. 192.168.1.0/24): " "${grep_match_ipv4_addr}\/([8-9]|1[0-9]|2[0-9]|30)?$" 0 && { profile_params["0.6-MAIN--VIRNET_IPV4_NETWORK"]="${choice}"; }

    __validate_network_address "${profile_params["0.6-MAIN--VIRNET_IPV4_NETWORK"]}" || { echo -e "E: Unable to process and validate IPv4 network address given."; return $_false; }
    echo -e "\tValidated Result: "$_validated_ipv4_network, $_validated_ipv4_hostnum, $_validated_ipv4_ip_start, $_validated_ipv4_ip_end

    [ "${_validated_ipv4_network}" != "${profile_params["0.6-MAIN--VIRNET_IPV4_NETWORK"]}" ] && { 
	    echo -e "\tI: The IPv4 network address does not match the validated/check result: \"${_validated_ipv4_network}\", thus your previous entry will be updated with the validated one."; 
	    profile_params["0.6-MAIN--VIRNET_IPV4_NETWORK"]="${_validated_ipv4_network}";
    }

    profile_params["0.7-MAIN--VIRNET_IPV4_ADDR"]="${_validated_ipv4_ip_start}"; 
    #question_loop_check_grep "${profile_params["0.7-MAIN--VIRNET_IPV4_ADDR"]}" "The IPv4 gateway IP for this bridge/vnet has been generated for you, please edit as you wish and press Enter to save the IP address.: " "${grep_match_ipv4_addr}$" 0 && { profile_params["0.7-MAIN--VIRNET_IPV4_ADDR"]="${choice}"; }
    profile_params["1.6-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_DNS_SERVERS"]="${profile_params["0.7-MAIN--VIRNET_IPV4_ADDR"]}"	#sets dns server same as gateway ip, will prompt user later to make necessary changes
    echo -e "\tI: IPv4 Gateway and DNS are set to \"${profile_params["0.7-MAIN--VIRNET_IPV4_ADDR"]}\""; 

    #### Optional - process IPV6 ####
    if [ "$_use_ipv6" == "Y" ]; then
	echo -e "\nAs you have indicated you would like to setup IPv6 earlier, we shall now proceed wih some questions related to IPv6."
	question_loop_check_grep "${profile_params["0.8-MAIN--VIRNET_IPV6_NETWORK"]}" "Please provide an IPv6 address for the bridge network and its mask in CIDR notation with allowable values from 7 to 128 (e.g. fd42:abcd:ef01:2345::1/64): " "${grep_match_ipv6_addr}\/([7-9]|[0-9][0-9]|1[0-1][0-9]|1[2][0-8])?$" 0 && { profile_params["0.8-MAIN--VIRNET_IPV6_NETWORK"]="${choice}"; }
	
	__validate_network_address "${profile_params["0.8-MAIN--VIRNET_IPV6_NETWORK"]}" || { echo -e "E: Unable to process and validate IPv6 network address given."; return $_false; }
	echo -e "\tValidated Result: "$_validated_ipv6_network, $_validated_ipv6_hostnum,$_validated_ipv6_ip_start,$_validated_ipv6_ip_end

	[ "${_validated_ipv6_network}" != "${profile_params["0.8-MAIN--VIRNET_IPV6_NETWORK"]}" ] && {
	    	echo -e "\tI: The IPv6 network address does not match the validated/check result: \"${_validated_ipv6_network}\", thus your previous entry will be updated with the validated one."; 
		profile_params["0.8-MAIN--VIRNET_IPV6_NETWORK"]="${_validated_ipv6_network}";
	}

	profile_params["0.9-MAIN--VIRNET_IPV6_ADDR"]="${_validated_ipv6_ip_start}"; 
	profile_params["1.7-DHCP_(DNSMASQ)--VIRNET_IPV6_DHCP_DNS_SERVERS"]="${profile_params["0.9-MAIN--VIRNET_IPV6_ADDR"]}";	#sets dns server same as gateway ip, will prompt user later to make necessary changes
	echo -e "\tI: IPv6 Gateway and DNS are set to \"${profile_params["0.9-MAIN--VIRNET_IPV6_ADDR"]}\""; 
    	#question_loop_check_grep "${profile_params["0.9-MAIN--VIRNET_IPV6_ADDR"]}" "The IPv6 gateway IP for this bridge/vnet has been generated for you, please edit as you wish and press Enter to save the IP address.: " "${grep_match_ipv6_addr}$" 0 && { profile_params["0.9-MAIN--VIRNET_IPV6_ADDR"]="${choice}"; }

    fi

    #### Optional - process DHCP ####
    if [ "$_use_dhcp" == "Y" ]; then
	echo -e "\nAs you have indicated you would like to use dhcp on this vnet/bridge earlier, we shall now proceed wih some questions related to DHCP settings required by dnsmasq."

	question_loop_check_grep "${profile_params["1.2-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_PING"]}" "DHCP service provider (dnsmasq) pings address first to ensure that an address is not in use before allocating it to a host.\n  For vnet environment, we disables this option by default, to override it, set the value to true. [true/false]" "${grep_match_true_false}" 0 && { profile_params["1.2-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_PING"]="${choice}"; }

	question_loop_check_grep "${profile_params["1.4-DHCP_(DNSMASQ)--VIRNET_IPV4_STATIC_HOST_COUNT"]}" "You may reserve some IPv4 addresses for static assignment\n  In this setup, the default value is 0 (none reserved) and we recommend adding the MAC address to dnsmasq configuration file with the IP address you desires.\n  To set the number of host for static assignment, enter an integer as follows: " "${grep_match_integer}" 0 && { profile_params["1.4-DHCP_(DNSMASQ)--VIRNET_IPV4_STATIC_HOST_COUNT"]="${choice}"; }

	_tmp_ipv4_start_addr=($( echo $_validated_ipv4_ip_start | sed 's/\./ /g' ))
	_tmp_ipv4_start=$(( ${_tmp_ipv4_start_addr[3]} + 1 )) 
	if [ ${profile_params["1.4-DHCP_(DNSMASQ)--VIRNET_IPV4_STATIC_HOST_COUNT"]} == 0 ]; then
		_validated_ipv4_ip_start_avail="$(echo $_validated_ipv4_ip_start | sed 's/\.[0-9]*$/\.'"${_tmp_ipv4_start}"'/g')"
	else
		_tmp_ipv4_start=$(( $_tmp_ipv4_start + ${profile_params["1.4-DHCP_(DNSMASQ)--VIRNET_IPV4_STATIC_HOST_COUNT"]} ))
		_validated_ipv4_ip_start_avail="$(echo $_validated_ipv4_ip_start | sed 's/\.[0-9]*$/\.'"${_tmp_ipv4_start}"'/g')"
	fi
	profile_params["1.5-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_RANGE"]="$_validated_ipv4_ip_start_avail,$_validated_ipv4_ip_end"

	question_loop_check_grep "${profile_params["1.3-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_LEASETIME"]}" "We need to know the lease time you desired for the dhcp lease(s). Default is 1h, minimum is 2m, no expiry indicate \"infinite\" without quotes.\n  Acceptable format, <integer><unit> where <unit> refers to s - second, m - minute, h - hour." "${grep_dnsmasq_dhcp_lease_time}" 0 && { profile_params["1.3-DHCP_(DNSMASQ)--VIRNET_IPV4_DHCP_LEASETIME"]="${choice}"; }

    fi

    return $_true
}

module_profile_listings_main(){
	_check_exec_installed_dir || { return $_false; }
        echo $shell_script_info
        echo "● List of Virtual Network Config (Profiles) available:"
        #echo "===================================================="
	echo -e "( Legend: NAME ; START TYPE ; STATE; IPV4 ; IPV6 ; DHCP PID )"
	_profilename=($(ls -1 ${profiledir}  | grep -e "-vnet.conf" | cut -d "-" -f 1))
	for i in ${_profilename[@]}; do
		i_state=$([ ! -f "${gbltmpdir}/vnet-${i}.network_up" ] && { echo "STOPPED/DOWN"; } || { echo "RUNNING/UP"; } )
		i_dhcppid=$([ ! -f "${gbltmpdir}/vnet-${i}.network_up" ] && { echo "-"; } || { cat "${execrundir}/${i}.dnsmasq.pid"; } )
		i_ipv4=$([ ! -f "${gbltmpdir}/vnet-${i}.network_up" ] && { echo "-"; } || { ps $i_dhcppid | grep -o -e "--listen-address [0-9]*.[0-9]*.[0-9]*.[0-9]* " | cut -d" " -f 2; } )
		i_ipv6=$([ ! -f "${gbltmpdir}/vnet-${i}.network_up" ] && { echo "-"; } || { ps $i_dhcppid | grep -o -e "--listen-address [a-f0-9]*:[a-f0-9]*:[a-f0-9]*:[a-f0-9]*:[a-f0-9]*:[a-f0-9]*" | cut -d" " -f 2; } )
		i_persistent=$([ "$(grep "PERSISTENT=" ${profiledir}/${i}-vnet.conf  | sed 's/\"//g')" = "PERSISTENT=true" ] && echo "PERSISTENT" || echo "ON-DEMAND" )
		echo -e "$i ; $i_persistent; $i_state ; $i_ipv4 ; $i_ipv6 ; $i_dhcppid"
	done
        echo ""

}

module_profile_read_config(){
     echo -e "List of variables captured from the profile config file:"
     while read -r l; do
	[[ $(echo $l | grep -E "^#") ]] || [ -z $l ] ||  {
		_tmp2conv2arr=$(echo "$l" | cut -d "=" -f 1;)
			_tmp_assigned_val=$(echo "$l" | cut -d "=" -f 2;)
                        echo -e "$_tmp2conv2arr"="$_tmp_assigned_val" 
                        _tmp2conv2arr=$(echo ${!profile_params[@]} | grep -oE "[a-z.A-Z0-9_()-]+$_tmp2conv2arr\b")
                        _tmp_assigned_val=$( echo $_tmp_assigned_val | sed 's/^"//g' | sed 's/"$//g' )
                        profile_params["$_tmp2conv2arr"]="$( echo ${_tmp_assigned_val})"
                        ##larr=$(echo $_tmp2conv2arr | sed 's/'"${_tmp2conv2arr}"'/profile_params["&"]/g')
		}
     done < ${profiledir}/${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}-vnet.conf
     echo -e "\nThe above variable has been processed and shall be made editable"
     #echo "${profile_params["0.9-MAIN--VIRNET_IPV6_ADDR"]}","${profile_params["0.5-MAIN--VIRNET_BRIDGE_MAC"]}"

     return $_true
}

module_profile_new_main(){
	_check_exec_installed_dir || { return $_false; }
	#1 - mode: new,edit
	[ ${#} -ne 1 ] && { return $_false; }
	_opn_type="${1}"

	if [ "$_opn_type" == "new" ]; then
		echo -e "Creating a new profile can be as easy as counting 1 2 3, let me walk you through the process, and without further a do, let's start..\n"
		echo -e "Game Rules\n==========\n1. There will a series of questions which are required for vnet to process.\n2. The profile config file will be shown and requires your confirmation before saving to the profiles directory.\n3. Done! Short and Sweet, don't you think so too?\n\nAlright, let's begin..\n"
	elif [ "$_opn_type" == "edit" ]; then
		echo -e "Editing a new profile can be as easy as counting 1 2 3, let me walk you through the process, and without further a do, let's start..\n"
		echo -e "Game Rules\n==========\n1. The profile configuration will be read and its current value will be stored.\n2. We will go through a series of questions with existing value from your profile config file, update the field with the changes you desired, otherwise press ENTER key to proceed to next question.\n3. The updated profile config file will be shown and requires your confirmation before saving to the profiles directory. You can choose not to save the file and the existing config will not be modified.\n4. Done! Short and Sweet, don't you think so too?\n\nAlright, let's begin..\n"	
	fi
	
	_get_profile_config_variables	#Initialise default config variables

	## Questions Routine -- BEGIN ##
	grep_match_true_false="^\\b(true|false)\\b$"
	grep_match_Y_n="^[Y0-9a-zA-Z]{1}$"
	grep_match_integer="^[0-9]+$"
	grep_match_mac="^[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}$"
	#grep_match_empty_or_word="/(^[a-zA-Z]+$)|(^(?![\s\S]))/g"
	grep_dnsmasq_dhcp_lease_time="^(infinite|[1-9]h|[1-9]{1}[0-9]{1,}h|[2-9]m|[1-9]{1}[0-9]{1,}m|([1-9]{1}[0-9]{0,}[2-9][0-9])s)$"
	grep_match_empty_or_word="^[a-zA-Z]{0,}$"
	grep_match_ipv4_addr="^(([0-9]|[0-9]{2}|1[0-9]{2}|2[0-5][0-5])\.){3}([0-9]|[0-9]{2}|1[0-9]{2}|2[0-5][0-5]){1}"
	grep_match_ipv6_addr="^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
	
	## vnet required questions
	if [ "$_opn_type" == "new" ]; then
		question_loop_check_grep "${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}" "I need to know the name of the bridge (vnet) aka profile name, please give it a name." "${grep_virnet_name}" 0 && { profile_params["0.1-MAIN--VIRNET_BRIDGE"]="${choice}"; }
		grep -qR "VIRNET_BRIDGE=\"${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}\"" ./profiles/*-vnet.conf && { 
			echo -e "\nE: Profile with the name \"${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}\" exists!\nNo worries, we will thus proceed to load the configuration and process them as edit mode.\n";
       			_opn_type="edit"
			module_profile_read_config
			
		}
	elif [ "$_opn_type" == "edit" ]; then
		question_loop_check_grep "${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}" "I need to know the name of the bridge (vnet) aka profile name, so that I can read the profile config file." "${grep_virnet_name}" 0 && { profile_params["0.1-MAIN--VIRNET_BRIDGE"]="${choice}"; }
		grep -qR "VIRNET_BRIDGE=\"${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}\"" ./profiles/*-vnet.conf || { echo -e "\nE: Profile with the name \"${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}\" does not exist!\nNo worries, we will thus proceed to create a new profile using this profile name \"${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}\"..\n"
		_opn_type="new"; 
		} && { module_profile_read_config; }
	fi

	question_loop_check_grep "${profile_params["0.2-MAIN--PERSISTENT"]}" "Run this bridge/profile automatically on every system startup? [true/false] " "${grep_match_true_false}" 0 && { profile_params["0.2-MAIN--PERSISTENT"]="${choice}"; } 

	question_loop_check_grep "${profile_params["0.4-MAIN--IS_ISOLATED_VIRNET"]}" "Isolate this bridge from other network(s)?\n  (Info: Isolated network works like Virtualbox host-only network, with the execption of allow dns and dhcp request on the gateway. [true/false] " "${grep_match_true_false}" 0 && { profile_params["0.4-MAIN--IS_ISOLATED_VIRNET"]="${choice}"; }

	[ -z "${profile_params["0.5-MAIN--VIRNET_BRIDGE_MAC"]}" ] && { profile_params["0.5-MAIN--VIRNET_BRIDGE_MAC"]=$(__mac_generator); } 
	question_loop_check_grep "${profile_params["0.5-MAIN--VIRNET_BRIDGE_MAC"]}" "A MAC address for the virtual bridge has been generated, please edit to the value as you wish and press Enter to save the MAC address." "${grep_match_mac}" 0 && { profile_params["0.5-MAIN--VIRNET_BRIDGE_MAC"]="${choice}"; } 
	
	question_loop_check_grep "${profile_params["1.1-DHCP_(DNSMASQ)--VIRNET_DOMAIN"]}" "Do you want to provide a DNS suffix for the bridge/vnet?\n  If so enter the domain suffix, otherwise leave it blank/empty (\"\"): " "${grep_match_empty_or_word}" 0 && { profile_params["1.1-DHCP_(DNSMASQ)--VIRNET_DOMAIN"]="${choice}"; }
	
	_use_ipv6="Y" && question_loop_check_grep "${_use_ipv6}" "Do you want to use IPv6 on this bridge/vnet? [Y/n]" "${grep_match_Y_n}" 0 && {  echo -e "\tI: Bridge will not be setup to support IPv6 network."; _use_ipv6="N"; }  || { echo -e "\tI: Bridge will be setup to support IPv6 network."; }
	
	_use_dhcp="Y" && question_loop_check_grep "${_use_dhcp}" "Do you want to use DHCP on this bridge/vnet? [Y/n]" "${grep_match_Y_n}" 0 && {  echo -e "\tI: Bridge will not use dhcp for IP provision."; _use_dhcp="N"; }  || { echo -e "\tI: Bridge will will use dhcp for IP provision."; }

	#profile_params["0.6-MAIN--VIRNET_IPV4_NETWORK"]="12.12.11.22/24" #tmp -to remove after finish testing.
	#profile_params["0.8-MAIN--VIRNET_IPV6_NETWORK"]="fd42:abcd:ef01:2345:6789::1/70"	#tmp -to remove after finish testing.
	
	## IPv4, IPv6, DHCP (dnsmasq) settings
	question_proc_network_answers
	
	## Modules setup questions
	echo -e "\nModules setup, some modules are profile specific and requires some configuration."

	question_loop_check_grep "${profile_params["10.1-MODULE_(NET_TAP)--USE_VIRNET_BRIDGE_TAP_MODULE"]}" "Do you want to enabe the use of TAP adapter for this bridge/vnet?\n  TAP adapter is required for example, vmware clients so that the virtual machine(s) can connect to the vnet via vmnet bridged interface, by default it is not setup.\n  To setup TAP adapter indicate \"true\" when prompted. [true/false]" "${grep_match_true_false}" 0 && { profile_params["10.1-MODULE_(NET_TAP)--USE_VIRNET_BRIDGE_TAP_MODULE"]="${choice}"; } 
	
	[ -z "${profile_params["10.2-MODULE_(NET_TAP)--VIRNET_BRIDGE_TAP_MODULE_MAC"]}" ] && { profile_params["10.2-MODULE_(NET_TAP)--VIRNET_BRIDGE_TAP_MODULE_MAC"]=$(__mac_generator); }
	question_loop_check_grep "${profile_params["10.2-MODULE_(NET_TAP)--VIRNET_BRIDGE_TAP_MODULE_MAC"]}" "A MAC address will still be generated for the tap adapter irregardless if TAP adapter is enabled or disabled.\n  Please review the generated address and make changes if necessary." "${grep_match_mac}" 0 && { profile_params["10.2-MODULE_(NET_TAP)--VIRNET_BRIDGE_TAP_MODULE_MAC"]="${choice}"; }

	
	## Questions Routine -- END ##

	echo -e "\n\nHooray! We have get all the necessary response from you.\nNow, before we proceed to save the profile configuration, we shall list the contents to be stored to the profiles directory."

	echo -e "\n» The following content will be saved to \"profiles/${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}-vnet.conf\": "
	process_config_variables
	echo ">>>End of File<<<"

	if [ "$_opn_type" == "new" ]; then
	    echo -e "\n» The following content will be saved to \"profiles/${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}-vnet-dnsmasq.conf\": "
	    echo -e "${config_dnsmasq}"
	    echo ">>>End of File<<<"
	    
	    echo -e "\n» The following content will be saved to \"/etc/dnsmasq/vnet.${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}\": "
	    echo -e "${common_cfg_hostbind_dnsmasq}"
	    echo ">>>End of File<<<"
	fi

	echo -e "\n\n"
	question_loop_check_grep "" "Write these config files to profiles directory? [Y/n]" "${grep_match_Y_n}" 0 && {
		echo -e "\n"
		if [ "${choice}" == "Y" ]; then
    			shared_root_rights_check_ask || { return $_false; }

			printf "Saving vnet config file..  "
			process_config_variables | $_need_sudo tee ${topdir}/profiles/${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}-vnet.conf &>/dev/null || { echo -e "Failed to save file."; return $_false; } 
			echo -e "[Done!]"

			if [ "$_opn_type" == "new" ]; then
			    printf "Saving dnsmasq config file.. "
			    echo -e "${config_dnsmasq}" | $_need_sudo tee ${topdir}/profiles/${profile_params["0.1-MAIN--VIRNET_BRIDGE"]}-vnet-dnsmasq.conf &>/dev/null || { echo -e "Failed to save file."; return $_false; }
			    echo -e "[Done!]"
			    
			    printf "Saving dnsmasq binding file to /etc/dnsmasq.d .. "
			    [ -d /etc/dnsmasq.d ] && {		    
				echo -e "${common_cfg_hostbind_dnsmasq}" | $_need_sudo tee /etc/dnsmasq.d/vnet.${profile_params["0.1-MAIN--VIRNET_BRIDGE"]} &>/dev/null || { echo -e "Failed to save file."; return $_false; }
			    	echo -e "[Done!]"
			    } || { echo -e "I: dnsmasq does exist on host system, skipping.."; }
			fi
		else
			[ "$_opn_type" == "new" ] && echo -e "I: You have choose not the save the configuration to the filesystem, thus this new profile setup in unsucessful."
			[ "$_opn_type" == "edit" ] && echo -e "I: You have choose not the save the configuration to the filesystem, thus no changes made to your existing profile setup."
			return $_false;
		fi
	}

	return $_true;
}


module_profile_delete_main(){
   _check_exec_installed_dir || { return $_false; }
   instructions="Additional 1 argument required: vnet delete <existing_profile_name>"
   [ "${1}" == "" ] && { echo $instructions; return $_false; }
   
   [ $(ls -1 ${profiledir}/ | cut -d "-" -f 1 | grep -e "${1}$" | uniq) ] || { 
	echo -e "Existing profile name: \"${1}\", not found.\nYou may run \"${0##*/} list\" for a list of existing profiles."; return $_false; }
   [  -f "${gbltmpdir}/vnet-${1}.network_up" ] && { echo -e "Profile \"${1}\" is still running. Please run \"vnet stop ${1}\" and re-run this command again."; return $_false; }
   [ $(grep "PERSISTENT=\"true\"" ${profiledir}/${1}-vnet.conf) ] && { 
	echo -e "You have set this profile \"${1}\" (i.e. PERSISTENT=\"true\" ) to be loaded when system startup.\nSome of your subsystem(s) may fails to work if this virtual network is missing/deleted."
   	read -p "- Do you wish to continue (i.e.DELETE)? [Y/n]: " answer;
	[ "$answer" != "${answer#[Y]}" ] || { echo "Profile deletion of \"${1}\" aborted as requested."; return $_false; }
   }
   
   shared_root_rights_check_ask || { return $_false; }

   profiletodelete=($(ls -1a $profiledir/$1*.conf 2>/dev/null))
   echo -e "${#profiletodelete[@]} files which belongs to existing profile name \"${1}\" are found and will be DELETED..\nIt is recommended to export the profile before delete (try: \"${0##*/} export\").";
        read -p "- Do you wish to continue deleting profile \"${1}\"? [Y/n]: " answer;
        if [ "$answer" != "${answer#[Y]}" ] ;then
	   for i in ${profiletodelete[@]}; do
	      $_need_sudo [ -w "${i}" ] && {
		$_need_sudo rm -f $i && { echo -e "Successfully deleted file \"${i##*/}\"."; } || { echo -e "Failed to delete file \"${i##*/}\"."; return $_false; }
	      } || { echo -e "No permission to delete \"${i##*/}\"."; return $_false; }
	   done
	echo "Profile deleted successfully. Also, running command \"${0##*/} list\" will not display profile \"${1}\"."
	fi

   return $_true
}

module_profile_rename_main(){
   _check_exec_installed_dir || { return $_false; }
   instructions="Additional 2 arguments required: vnet rename <existing_profile_name> <new_profile_name>"
   [ "${1}" == "" ] && { echo $instructions; return $_false; }
   [ "${2}" == "" ] && { echo $instructions; return $_false; }
   [ "${1}" == "${2}" ] && { echo "New Profile Name same as existing profile name to be renamed :)"; return $_false; }

   [ $(ls -1 ${profiledir}/ | cut -d "-" -f 1 | grep "${1}" | uniq) ] || { \
	   echo -e "Existing profile name: \"${1}\", not found.\nYou may run \"${0##*/} list\" for a list of existing profiles."; return $_false; }
   [ $(ls -1 ${profiledir}/ | cut -d "-" -f 1 | grep "${2}" | uniq) ] && { \
	   echo -e "New Profile Name: \"${2}\", conflicts with an existing vnet profiles, please give another name and try again.\nYou may run \"${0##*/} list\" for a list of existing profiles."; return $_false; }

   shared_root_rights_check_ask || { return $_false; }

   profiletorename=($(ls -1a $profiledir/$1*.conf 2>/dev/null))
   if [ ${#profiletorename[@]} != 0 ]; then 
	echo -e "${#profiletorename[@]} files which belongs to existing profile name \"${1}\" are found and\n will be renamed to compatible file naming format with the new profile name \"${2}\"."; 
	read -p "- Do you wish to continue? [Y/n]: " answer;
   	if [ "$answer" != "${answer#[Y]}" ] ;then
	   for i in ${profiletorename[@]}; do
	      	[ "${i##*/}" == "${1}-vnet.conf" ] && {
		    [ -w "${i}" ] && {
		    	$_need_sudo sed -i "s/VIRNET_BRIDGE\=\"${1}\"/VIRNET_BRIDGE\=\"${2}\"/g" ${profiledir}/${1}-vnet.conf 
			echo -e "vnet config file updated successfully"
		    } || { echo -e "Failed to update ${i##*/}, exiting."; return $_false; }
		}
	   	[ -w "${i}" ] && { $_need_sudo mv -f $i $(echo $i | sed "s/\/$1\-/\/$2\-/") && 
			{ echo -e "Successfully renamed file \"${i##*/}\" to \"$(echo ${i##*/} | sed "s/$1\-/$2\-/")\"."; } || { echo -e "Failed to rename \"${i##*/}\", exiting."; return $_false; } 
		}
	   done
	fi
   fi
   return $_true
}

module_profile_export_main(){
    _check_exec_installed_dir || { return $_false; }
    echo -e "We will proceed to backup all the profile(s) present in profiles directory to a compressed zip file.\n"

    question_loop_check_command "" "Please provide the path where the backup file will be stored. Backup filename will be automatically generated." "-w" "I won't be able to write to this directory!" 0 
    _backup_path="${choice}"
    echo -e "The follow profile(s) are found and will be backup:"
    ls -1 "${profiledir}"  | grep -e "-vnet.conf" | cut -d "-" -f 1

    _store_call_dir=${PWD}
    _ts=$(date +%s)
    _backup_filename="vnet-profiles-backup-${_ts}.zip"
    echo -e "Backup file will be \"${_backup_filename}\" and will be stored in \"${_backup_path}\"."
    mkdir /tmp/vnet-backup-${_ts}
    cd ${profiledir}
    sha256sum * > /tmp/vnet-backup-${_ts}/CHECKSUM_BACKUP
    zip -9 ${_backup_path}/${_backup_filename} *
    cd /tmp/vnet-backup-${_ts}
    zip -9 ${_backup_path}/${_backup_filename} CHECKSUM_BACKUP
    rm -rf /tmp/vnet-backup-${_ts}
    cd "${_store_call_dir}" && unset _store_call_dir

    echo -e "\nBackup request completed successfully. The backup file \"${_backup_filename}\" has the following checksum:"
    sha256sum "${_backup_path}/${_backup_filename}"

    return $_true
}

module_profile_import_main(){
    _check_exec_installed_dir || { return $_false; }
    echo -e "We will now proceed to restore the profiles based on your choice."
    question_loop_check_command "" "Before we can go any further, I need the filepath to the backup file (e.g. /home/user/vnet-profiles-backup-1234567.zip)." "-r" "I won't be able to read the file or file does not exist!" 0 
    _backup_file="${choice}"
    file -b "${_backup_file}" | grep -w "Zip archive data" &>/dev/null || { echo -e "  E: File provided is not a zip archive, exiting.."; return $_false; }
    _store_call_dir=${PWD}

    _ts=$(date +%s)
    _tmp_inflated_dir="/tmp/vnet-import-${_ts}"
    mkdir -p "${_tmp_inflated_dir}"
    unzip -qq ${_backup_file} -d "${_tmp_inflated_dir}"
    cd "${_tmp_inflated_dir}"
    _virtnet_zip_list=( $(ls -1 "${_tmp_inflated_dir}"  | grep -e "-vnet.conf" | cut -d "-" -f 1) )
    _files_failed_checksum=($(cat CHECKSUM_BACKUP | sha256sum -c --quiet |& head -n -1 | cut -d ":" -f 1))
    _profiles_failed_checksum=($(echo ${_files_failed_checksum[@]} | sed 's/-vnet.conf//g' | sed 's/-vnet-.*.conf//g'))
    echo -e "\nList of Profile(s) found from the backup file provided:"
    echo ${_virtnet_zip_list[@]} | sed 's/ /\n/g'
    echo -e ""

    echo -e "Please select the profile(s) to be imported based on the list above.\nFor multiple profile(s), separate them with a comma ( e.g. \"profile1,profile2\" ) and to restore all, type \"(all)\" when prompted."
    read -p "  Your response: " choice

    unset _selected
    if [ "${choice}" = "(all)" ]; then
	_selected=("${_virtnet_zip_list[@]}"); 
    elif $(echo "${choice}" | grep -oq  "\b[,]\b"); then 
        _selected=($( echo "${choice}" | sed 's/\b[,]\b/ /g'));
    elif $(echo "${choice}" | grep -qE "${grep_virnet_name}"); then
	_selected="${choice}"
    else
        echo "E: Your input does not conform to the requirements, exiting.."; 
    fi
    
    echo -e "\nImport of profile(s) will begin here...\n"
    read -p "» To continue, enter Y. [Y/n] : " choice
    [ "${choice}" = "Y" ] || { echo -e "» User abort. No changes made to the host's filesystem, yet! =)"; return $_false; }
    shared_root_rights_check_ask || { return $_false; }

    echo -e ""
    if [ -n "${_selected}" ]; then
	for i in ${_selected[@]}; do
		[ $(echo "${_virtnet_zip_list[@]}" | grep -ow "${i}") ] || { echo -e "E: Your input \"${i}\" does not match the list of profile names in the backup archive."; continue;}
		[ $(echo "${_profiles_failed_checksum[@]}" | grep -ow "${i}") ] && { 
			echo -e "E: Skipping restoring profile for \"${i}\" as one or more of its config file(s) fails file integrity check";
			echo -e "File(s) that failed the integrity check:"
			echo -e "${_files_failed_checksum[@]}" | sed 's/ /\n/g' | grep "${i}"
			echo -e ""
			continue
		}
		echo -e "Importing \"${i}\".."
		_tmp_config_files=($(ls -1 ${_tmp_inflated_dir}/${i}-*))

		for j in ${_tmp_config_files[@]}; do
			if [ -e "${profiledir}/${j##*/}" ]; then
				[ "$(sha256sum "${j}" | cut -d " " -f 1)" == "$(sha256sum "${profiledir}/${j##*/}" | cut -d " " -f 1)" ] && { 
					echo -e "I: File to copied already exist and has the same checksum. Skipping.."; continue; 
				} || {
					echo -e "I: File already exist and but has a different checksum.";
					read -p "  Overwrite [Y/n]: " choice
					[ "${choice}" == "Y" ] || { echo -e "User does not want to replace this file \"${j##*/}\", skipping"; continue; }
				}
			fi
			$_need_sudo cp ${j} ${profiledir} && { echo -e "I: Copied \"${j##*/i}\" success!"; } || { echo -e "E: Fails to copy \"${j##*/i}\"."; }
		done
		[ -e "/etc/dnsmasq.d/vnet.${i}" ] || { 
			profile_params["0.1-MAIN--VIRNET_BRIDGE"]="${i}"
			_get_common_cfg_hostbind_dnsmasq
			echo "${common_cfg_hostbind_dnsmasq}" | $_need_sudo tee /etc/dnsmasq.d/vnet.${profile_params["0.1-MAIN--VIRNET_BRIDGE"]} &>/dev/null
		}
	done
	
    fi
    rm -rf /tmp/vnet-import-${_ts}
    return $_true


}

module_profile_edit_dhcp_config_main(){
    #dhcp_server=dnsmasq
    _check_exec_installed_dir || { return $_false; }
    instructions="Additional 1 argument required: <profile_name>"
   [ "${1}" == "" ] && { echo $instructions; return $_false; }
   echo -e "\nChanges to dnsmasq config file for profile: \"${1}\" will begin here...\n"
   read -p "» To continue, enter Y. [Y/n] : " choice
   [ "${choice}" = "Y" ] || { echo -e "» User abort. No changes made to the host's filesystem, yet! =)"; return $_false; }
    shared_root_rights_check_ask || { return $_false; }

   [ -f "${profiledir}/${1}-vnet-dnsmasq.conf" ] && $_need_sudo "${EDITOR:-vim}" ${profiledir}/${1}-vnet-dnsmasq.conf || { echo "\"${1}-vnet-dnsmasq.conf\" not found."; return $_false; }
   echo -e "Remember, if you make any changes to the dnsmasq config file, please run \"vnet restart-dhcp ${1}\" for dnsmasq to process them."

}


