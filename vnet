#!/usr/bin/bash -
[ "${0##*/}" == "vnet" ] || { echo -e "This script shall be of filename \"vnet\" (w/o quotes)"; exit 1; }
version="3.3.0"
shell_script_info="Virtual Network (vnet) Kit ${version}"

_false=1
_true=0

topdir=$(readlink -f "${0}")
topdir="${topdir%/*}"
#echo $topdir && exit
profiledir="${topdir}/profiles"
modulesdir="${topdir}/modules"
execrundir="${topdir}/exec"	#varrun
execlibdir="${topdir}/exec"	#varlib
gblsysvirtnetdir="/sys/devices/virtual/net"

## Unset Runtime Flags ##
unset flag_reboot

#### ALL FUNCTIONS STARTS HERE ####

_msg_need_root="Root (sudo/su) rights required. Please re-run script with root privileges"
_check_has_root(){
    [[ $EUID == 0 ]] && { return $_true; } || { return $_false; }
}

_msg_only_exe_via_systemd="Command can only be executed via systemd. Exiting.."
_check_exec_via_systemd(){
    [[ "${PPID}" == "1" ]] && { return $_true; } || { return $_false; }
}

_source_file(){
    [ -f ${1} ] || { return $_false; }
    . ${1}
    return $_true
}

_source_modules(){
    _source_file "$modulesdir/${1}" || { echo "Module file \"${1}\" does not exist."; return $_false; }
}

_netmask2cidr(){
    # Assumes there's no "255." after a non-255 byte in the mask
    local x=${1##*255.}
    set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
    x=${1%%$3*}
    echo $(( $2 + (${#x}/4) ))
    return $_true
}

_cidr2netmask(){
    # Number of args to shift, 255..255, first non-255 byte, zeroes
    MASK_A="$(( 5 - ( $1 / 8 ) )) 255 255 255 255"
    MASK_B="$(( 255 << ( 8 - ( $1 % 8 ) )  & 255 )) 0 0 0"
    set -- $MASK_A $MASK_B
    [ $1 -gt 1 ] && shift $1 || shift
    echo ${1-0}.${2-0}.${3-0}.${4-0}
    return $_true
}

_check_exec_installed_dir(){
    [ -f ${topdir}/.installed ] || { echo -e "E: Running vnet directly without installing is stricly disallowed!\n   Please run \"install\" command to begin installation process or \"upgrade\" to upgrade vnet installed on the host.\n   Running vnet without arguments will show the list of commands available based on the mode the tool is running in."; return $_false; }
    . "${topdir}/.installed"
    [[ "${topdir}" == "${VIRNET_INSTALLED_PATH}" ]] || { echo -e "E: Running vnet directory without going through proper installation process is strictly disallowed!\n   Please re-run \"install\" command to re-run the installation process."; return $_false; }
    return $_true
}

_deactivate_networkmanagers_managing_bridge(){
    [ "${1}" != ${VIRNET_BRIDGE} ] && { return $_false; }
    if [ $(systemctl is-active NetworkManager) ]; then
        nmcli dev set ${VIRNET_BRIDGE} managed no
    fi
    return $_true
}

_check_active_bridge_managed_by_vnet(){
    unset tmpbrmacaddr tmpbrnetaddr tmpbrmacaddrcheck tmpbrnetaddripv4check tmpbrnetaddripv6check
    [ -d ${gblsysvirtnetdir}/${1} ] || return $_false;   #indicates that iface does not exist
    [ -f ${gblsysvirtnetdir}/${1}/address ] && tmpbrmacaddr=($(cat ${gblsysvirtnetdir}/${1}/address))
    tmpbrnetaddr+=($(ip -o -p -4 address ls ${1} | cut -d\\ -f1 | sed 's/  */ /g' | tr ' ' ';' | cut -d\; -f4))
    tmpbrnetaddr+=($(ip -o -p -6 address ls ${1} | cut -d\\ -f1 | sed 's/  */ /g' | tr ' ' ';' | cut -d\; -f4))
    [ "${VIRNET_BRIDGE}" != "${1}" ] && { _source_file "${profiledir}/${1}-vnet.conf" || { return $_false; } }
    echo "${tmpbrmacaddr[@]}" | grep -oq "${VIRNET_BRIDGE_MAC}" && tmpbrmacaddrcheck=1  || unset tmpbrmacaddrcheck
    echo "${tmpbrnetaddr[@]}" | grep -oq "${VIRNET_IPV4_ADDR}/${VIRNET_IPV4_NETWORK##*/}" && tmpbrnetaddripv4check=1 || unset tmpbrnetaddripv4check
    echo "${tmpbrnetaddr[@]}" | grep -oq "${VIRNET_IPV6_ADDR}/${VIRNET_IPV6_NETWORK##*/}" && tmpbrnetaddripv6check=1 || unset tmpbrnetaddripv6check
    [ "${tmpbrmacaddrcheck}" ] && [ "${tmpbrnetaddripv4check}" ] && [ "${tmpbrnetaddripv6check}" ] || { return $_false; }
    return $_true;
}

_fetch_br_veth_ifaces(){
    unset br_veth_ifaces_list
    br_veth_ifaces_list=($(ls -A ${gblsysvirtnetdir}/${1}/brif/))
    [  ${#br_veth_ifaces_list[@]} != 0 ] && return $_true || return $_false
}

_restore_br_veth_ifaces(){
    for i in ${br_veth_ifaces_list[@]}; do
        ip link set $i master ${1}
    done
    return $_true;
}

_print_br_veth_ifaces(){
    printf "» The following are the virtual interfaces that is currently attached to \"${VIRNET_BRIDGE}\": \n"
    printf "${br_veth_ifaces_list[*]}\n"
    return $_true;
}

_print_help_manual_reattach_veth_ifaces(){
    printf "» You may use command ip or brctl on the terminal with root privileges to re-attach them to the bridge. Example:\n"
    printf "  1. Using command brctl: \"brctl addif ${VIRNET_BRIDGE} <virtual_interface_name>\"\n"
    printf "  2. Using command ip: \"ip link set <virtual_interface_name> master ${VIRNET_BRIDGE}\"\n"
    return $_true;
}

_init_profile_generated_variables(){
    #Only applies to start()
    VIRNET_DHCP_CFGFILE="${profiledir}/${VIRNET_BRIDGE}-vnet-dnsmasq.conf"
    VIRNET_IPV4_MAX_HOST=$(( 2**(32-"${VIRNET_IPV4_NETWORK##*/}") -3 ))
    [ ${VIRNET_IPV4_STATIC_HOST_COUNT} -le ${VIRNET_IPV4_MAX_HOST} ] && { VIRNET_IPV4_DHCP_MAX=$(( ${VIRNET_IPV4_MAX_HOST} - ${VIRNET_IPV4_STATIC_HOST_COUNT} )); } || {  VIRNET_IPV4_DHCP_MAX=${VIRNET_IPV4_MAX_HOST}; }
}

_ifdown(){
    ip addr flush dev ${VIRNET_BRIDGE}
    ip link set dev ${VIRNET_BRIDGE} down
}

_ifup(){
    MASK=${VIRNET_IPV4_NETWORK##*/}
    CIDR_ADDR="${VIRNET_IPV4_ADDR}/${MASK}"
    ip addr add ${CIDR_ADDR} dev ${VIRNET_BRIDGE}
    ip link set dev ${VIRNET_BRIDGE} address ${VIRNET_BRIDGE_MAC}
    ip link set dev ${VIRNET_BRIDGE} up
}

_setup_dhcp_server(){

    if [ -n "$VIRNET_IPV6_ADDR" ] && [ -n "$VIRNET_IPV6_NETWORK" ]; then
	VIRNET_IPV6_ARG="--dhcp-range ::,constructor:${VIRNET_BRIDGE},ra-stateless,ra-names --listen-address ${VIRNET_IPV6_ADDR} --enable-ra"
    fi

    VIRNET_DOMAIN_ARG=""
    if [ -n "$VIRNET_DOMAIN" ]; then
        VIRNET_DOMAIN_ARG="-s $VIRNET_DOMAIN -S /$VIRNET_DOMAIN/"
    fi

    VIRNET_DHCP_CFGFILE_ARG=""
    if [ -n "$VIRNET_DHCP_CFGFILE" ]; then
        VIRNET_DHCP_CFGFILE_ARG="--conf-file=${VIRNET_DHCP_CFGFILE}"
    fi

    # https://lists.linuxcontainers.org/pipermail/lxc-devel/2014-October/010561.html
    for DNSMASQ_USER in vnet-dnsmasq nobody
    do
        if getent passwd ${DNSMASQ_USER} >/dev/null; then
            break
        fi
    done

    VIRNET_IPV4_DHCP_PING_ARG=""
    if [ "x$VIRNET_IPV4_DHCP_PING" = "xfalse" ]; then
        VIRNET_IPV4_DHCP_PING_ARG="--no-ping"
    fi

    #Check if lease time
    [ VIRNET_IPV4_DHCP_LEASETIME == "" ] || VIRNET_IPV4_DHCP_RANGE="${VIRNET_IPV4_DHCP_RANGE},${VIRNET_IPV4_DHCP_LEASETIME}"

    VIRNET_IPV4_ARG="--listen-address ${VIRNET_IPV4_ADDR} --dhcp-range ${VIRNET_IPV4_DHCP_RANGE} --dhcp-lease-max=${VIRNET_IPV4_DHCP_MAX} --dhcp-rapid-commit"

    dnsmasq $VIRNET_DHCP_CFGFILE_ARG $VIRNET_DOMAIN_ARG -u ${DNSMASQ_USER} \
            --strict-order --bind-interfaces --pid-file="${execrundir}"/${VIRNET_BRIDGE}.dnsmasq.pid \
            --quiet-dhcp --quiet-dhcp6 --quiet-ra --dhcp-no-override \
            $VIRNET_IPV6_ARG $VIRNET_IPV4_ARG $VIRNET_IPV4_DHCP_PING_ARG \
            --except-interface=lo --interface=${VIRNET_BRIDGE} \
            --dhcp-leasefile="${execlibdir}"/${VIRNET_BRIDGE}.dnsmasq.leases \
            --dhcp-authoritative || false

}

_vethadapter_down(){
    echo "WIP-_vethadapter_down"
}

_vethadapter_up(){
    echo "WIP-_vethadapter_up"
}


start(){
    # Generate other Profile required variables
    _init_profile_generated_variables

    [ "x$USE_THIS_PROFILE" = "xtrue" ] || _check_active_bridge_managed_by_vnet ${VIRNET_BRIDGE} || { echo -e "This profile \"${VIRNET_BRIDGE}\" has been disabled."; return $_true; }

    _check_active_bridge_managed_by_vnet ${VIRNET_BRIDGE} && { echo "${VIRNET_BRIDGE} is already running";  { [[ "${PPID}" == "1" ]] && return $_true || return $_false; } }

    if [ -d ${gblsysvirtnetdir}/${VIRNET_BRIDGE} ]; then
        stop force || $_true
    fi

    FAILED=1

    cleanup(){
        set +e
        if [ "$FAILED" = "1" ]; then
            echo "Failed to setup ${VIRNET_BRIDGE}." >&2
            stop force
	    [[ "${PPID}" == "1" ]] && return $_false || exit 1
        fi
    }

    trap cleanup EXIT HUP INT TERM
    set -e

    ## Checks done - proceed to build the bridge ##
    
    [ ! -d ${gblsysvirtnetdir}/${VIRNET_BRIDGE} ] && ip link add dev ${VIRNET_BRIDGE} type bridge
    echo 1 > /proc/sys/net/ipv4/ip_forward
    echo 0 > /proc/sys/net/ipv6/conf/${VIRNET_BRIDGE}/accept_dad || $_true

    # if we are run from systemd on a system with selinux enabled,
    # the mkdir will create dir defined in this variable ${execrundir} as init_var_run_t 
    # which dnsmasq can't write its pid into, so we restorecon it (to var_run_t)
    if [ ! -d "${execrundir}" ]; then
        mkdir -p "${execrundir}"
        if which restorecon >/dev/null 2>&1; then
            restorecon "${execrundir}"
        fi
    fi

    _ifup
    [ "${USE_VIRNET_BRIDGE_TAP_MODULE}" = "true" ] && { _source_modules "network.tap" && _tapadapter_up; }

    VIRNET_IPV6_ARG=""
    if [ -n "$VIRNET_IPV6_ADDR" ] && [ -n "$VIRNET_IPV6_NETWORK" ]; then
        echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
        echo 0 > /proc/sys/net/ipv6/conf/${VIRNET_BRIDGE}/autoconf
        ip -6 addr add dev ${VIRNET_BRIDGE} ${VIRNET_IPV6_ADDR}/${VIRNET_IPV6_NETWORK##*/}
    fi
    #_iptables_up
    _iptables_proc up

    #set network managers not to manage this bridge
    _deactivate_networkmanagers_managing_bridge ${VIRNET_BRIDGE}

    _setup_dhcp_server || cleanup

    printf "Virtual Bridge \"${VIRNET_BRIDGE}\" started successfully.\n"
    
    if [ ${#br_veth_ifaces_list[@]} -gt 0 ]; then
        printf "Restoring virtual interfaces for \"${VIRNET_BRIDGE}\" after restart..\n"
        _restore_br_veth_ifaces "${VIRNET_BRIDGE}"
    fi

    FAILED=0
}

stop(){
    [ "x$USE_THIS_PROFILE" = "xtrue" ] || _check_active_bridge_managed_by_vnet ${VIRNET_BRIDGE} || [ "$1" = "force" ] || { return $_true; }

    _check_active_bridge_managed_by_vnet ${VIRNET_BRIDGE} || [ "$1" = "force" ] || { echo "${VIRNET_BRIDGE} isn't running"; { [[ "${PPID}" == "1" ]] && return $_true || return $_false; } }

    # Fetch a list of virtual interface(s) attached to the virtual bridge
    _fetch_br_veth_ifaces ${VIRNET_BRIDGE} && { tmp_vbridge_ifaces=1; } || { unset tmp_vbridge_ifaces; }

    # If $VIRNET_BRIDGE has attached interfaces, don't destroy the bridge, unless it is called by systemd stop command
    # Warn and ask user if would like to proceed for destroy, which is skipped for daemon request and if stop force &/or reboot flag(s) are set.
    if [[ ! "${PPID}" == "1" ]] || [ ! "$1" = "force" ] || [ ! ${flag_reboot} ]; then
        if [ ${tmp_vbridge_ifaces} ]; then
            echo -e "» There are virtual adapters attached to this bridge and shutting/stopping this bridge interface will cause network connectivity issues for devices connected to this (\"${VIRNET_BRIDGE}\") interface."
            read -p "   - To proceed shutting down (\"${VIRNET_BRIDGE}\") interface, enter Y. [Y/n] : " choice
            [ "${choice}" = "Y" ] || { echo -e "» User choose to abort shutting down (\"${VIRNET_BRIDGE}\") bridge interface."; return $_false; }
        fi
    fi
    
    if [ ${tmp_vbridge_ifaces} ] && [ ! ${flag_reboot} ]; then
        printf "» You have choose to shutdown (\"${VIRNET_BRIDGE}\") bridge interface which has virtual interfaces attached to it.\n"
        printf "» The list of virtual interface(s) will be displayed and you need to add them (restore) back if you start this bridge again.\n"
        _print_help_manual_reattach_veth_ifaces
    fi
    
    [ ${tmp_vbridge_ifaces} ] && _print_br_veth_ifaces

    ## Checks done - proceed to tear down the bridge ##
    
    [ -d ${gblsysvirtnetdir}/${VIRNET_BRIDGE}-tap ] && { _source_modules "network.tap" && _tapadapter_down; }
    if [ -d ${gblsysvirtnetdir}/${VIRNET_BRIDGE} ]; then
        _ifdown
    	_iptables_proc down

        pid=`cat "${execrundir}"/${VIRNET_BRIDGE}.dnsmasq.pid 2>/dev/null` && kill -9 $pid
        rm -f "${execrundir}"/${VIRNET_BRIDGE}.dnsmasq.pid
    
        ip link delete ${VIRNET_BRIDGE};
    fi
    
    [ -f "${execlibdir}"/${VIRNET_BRIDGE}.dnsmasq.leases ] && rm -f "${execlibdir}"/${VIRNET_BRIDGE}.dnsmasq.leases
    printf "Virtual Bridge \"${VIRNET_BRIDGE}\" stopped successfully.\n"
}

restart_dhcp_server(){
    echo "Restart DHCP Server Feature"
    echo "==========================="
    _check_active_bridge_managed_by_vnet ${VIRNET_BRIDGE} || { echo "Couldn't restart DHCP server for \"${VIRNET_BRIDGE}\" network as it is not up/running. Exiting.."; return $_false; }
    i_dhcppid=$(cat "${execrundir}/${VIRNET_BRIDGE}.dnsmasq.pid";)
    [ -n $i_dhcppid ] &&  [[ $(grep -E "${VIRNET_BRIDGE}.*dnsmasq"  /proc/$i_dhcppid/cmdline) ]] && { 
        echo -e "Existing DHCP (dnsmasq) process for \"${VIRNET_BRIDGE}\" found with PID:$i_dhcppid will be terminated.";
        kill -9 $i_dhcppid || { echo -e "Unable to terminate dnsmasq PID:$i_dhcppid, exiting.."; return $_false; }
    }
    _setup_dhcp_server && { echo -e "Successfully restarted DHCP Server for \"${VIRNET_BRIDGE}\" with new PID:$(cat "${execrundir}/${VIRNET_BRIDGE}.dnsmasq.pid")."; return $_true; } || {
        echo -e "Unable to start a new instance of DHCP server for \"${VIRNET_BRIDGE}\"."; return $_false; }
}

daemon_fetch_list_virtualnetworks(){
    _check_exec_installed_dir || { return $_false; }
    _check_exec_via_systemd || { echo -e $_msg_only_exe_via_systemd; return $_false; }
    printf "Running vnet via systemd (${PPID})\n"
    virtnetlist=( $(ls -1 "${profiledir}"  | grep -e "-vnet.conf" | cut -d "-" -f 1) )

    for i in ${virtnetlist[@]}; do
        . "${profiledir}/${i}-vnet.conf"    # Load Profile/Config file
	printf "Found and processing profile \"${i}\", mode:\"${1}\", autostart:\"${PERSISTENT}\"\n"

        if [ "x${PERSISTENT}" = "xtrue" ]; then
            if [ "${1}" = "startup" ]; then
                start
            elif [ "${1}" = "shutdown" ]; then
                stop force
            elif [ "${1}" = "reinitiate" ]; then
                flag_reboot=1
                stop force || $_true
                start
                unset flag_reboot
            fi
        else
            printf "Profile \"${i}\", is not set to run in persistence, vnet daemon does not process non-persistent profile, use vnet command on your terminal instead."
        fi
    done

}

## Pre-Execution Check ##
precheck(){
    # Handles start, stop, reload requests.
    config="${profiledir}/${2}-vnet.conf"

    _check_exec_installed_dir || { return $_false; }
    _check_has_root || { echo -e $_msg_need_root; return $_false; }
    [ ! "${2}" ] && { echo -e "!!ERROR!! Please provide a virtual network profile name!\nFor Example to create a vnet profile \"test\", the command shall be: \nvnet new test\nRun vnet without any arguments to get a list of commands available."; return $_false; }


    # Check if config file exist and attempt to load config file
    # shellcheck disable=SC1090
    _source_file "${config}" || { echo -e "!!ERROR!! Config File not Found! It should be stored in ${config}"; exit 1; } 
    [ "${2}" != "${VIRNET_BRIDGE}" ] && { echo -e "!!Error!!\nArgument 1 \"${1}\" is not the same as VIRNET_BRIDGE=\"${VIRNET_BRIDGE}\" in profiles/${2}-vnet.conf\nPlease change VIRNET_BRIDGE=\"${2}\" manually in profiles/${2}-vnet.conf"; return $_false; }

#echo "$USE_THIS_PROFILE, $VIRNET_BRIDGE, $VIRNET_BRIDGE_MAC, $VIRNET_IPV4_ADDR, $VIRNET_IPV4_NETWORK, $VIRNET_IPV4_DHCP_RANGE, $VIRNET_IPV4_DHCP_MAX, $VIRNET_DHCP_CFGFILE, $VIRNET_IPV4_DHCP_PING, $VIRNET_DOMAIN, $VIRNET_IPV6_ADDR, $VIRNET_IPV6_NETWORK"
#exit 0;

    case "$1" in
    	start)
	    start
	    ;;
	    stop)
	    stop
	    ;;
	    stop-force)
	    stop force
	    ;;
        restart-dhcp|-rd)
        echo -e "Note: Restart dhcp feature has been temporarily made unavailable due to some bugs present. Will be fixed and re-release."
        #restart_dhcp_server
        ;;
 
    esac

}

#### ALL FUNCTIONS ENDS HERE ####

# Load common shared modules file #
_source_modules "shared"
# Load iptables.ruleset module file #
_source_modules "iptables.rulesets"

# See how we were called.
case "$1" in
    start)
	precheck $1 $2
    ;;

    stop)
	precheck $1 $2
    ;;

    stop-force)
	precheck $1 $2
    ;;

    startup|shutdown|reinitiate)
	daemon_fetch_list_virtualnetworks $1
    ;;

    restart|reload)
    flag_reboot=1
	precheck stop $2
	precheck start $2
    unset flag_reboot
    ;;

    restart-dhcp|-rd)
        precheck $1 $2
    ;;

    show|show-profile|-sp)
    _source_modules "profile.manager"
    module_profile_new_main "show" $2
    ;;

    new|new-profile|-np)
	_source_modules "profile.manager"
	module_profile_new_main "new" $2
    ;;

    edit|edit-profile|-ep)
	_source_modules "profile.manager"
	module_profile_new_main "edit" $2
    ;;

    export|export-profile|-exp)
	_source_modules "profile.manager"
        module_profile_export_main
    ;;

    import|import-profile|-imp)
	_source_modules "profile.manager"
        module_profile_import_main
    ;;

    delete|delete-profile|-dp)
	_source_modules "profile.manager"
        module_profile_delete_main $2
    ;;

    rename|rename-profile|-rp)
	_source_modules "profile.manager"
       	module_profile_rename_main $2 $3
    ;;

    edit-dhcp-config|-edc)
	_source_modules "profile.manager"
	module_profile_edit_dhcp_config_main $2
    ;;

    list|status|-l)
	_source_modules "profile.manager"
	module_profile_listings_main
    ;;

    macgen)
	_source_modules "profile.manager"
	module_profile_macgen_main
    ;;

    install)
	_source_modules "deploy.wizard"
	wizard_deploy_install_main
    ;;

    uninstall)
	_source_modules "deploy.wizard"
	wizard_deploy_uninstall_main
    ;;

    upgrade)
	_source_modules "deploy.wizard"
	wizard_deploy_upgrade_main
    ;;

    --show-change-log)
	[ -f ${topdir}/CHANGELOG ] && less ${topdir}/CHANGELOG
    ;;

    --show-install-dir)
	_check_exec_installed_dir && { echo -e "vnet tool is installed in: \"${topdir}\"."; }
    ;;

    version|-v)
        echo $shell_script_info
    ;;

    *)
        _check_exec_installed_dir &>/dev/null && { _exec_mode="Tool"; } || { _exec_mode="Package"; }
    	_check_exec_installed_dir &>/dev/null && { _install_state="vnet has been installed on this machine, to remove this kit, run command \"uninstall\".\n"; } || 
		{ _install_state="PLEASE TAKE NOTE: Initial setup on the host system required. Run command \"install\" to start the installation process."; }
     help="$shell_script_info
\nvnet is currently running as ${_exec_mode} mode.\n${_install_state}
\n\nList of Commands available
\n============================
\n  ▪ For ALL modes:\n
\n\tmacgen \n\t\tRandomly generates an unicast MAC Address.\n
\n\tversion, -v \n\t\tDisplay version information.\n
\n\t--show-change-log \n\t\tDisplays CHANGELOG information on terminal.\n
\n  ▪ For Tool mode:\n
\n\tlist, status, -l \n\t\tList Profile(s) Information and Status.\n
\n\tstart <profile_name> \n\t\tStart virtual network of profile name.\n
\n\tstop <profile_name> \n\t\tStop virtual network of profile name.\n
\n\tstop-force <profile_name> \n\t\tForce Stop virtual network of profile name.\n
\n\trestart, reload <profile_name> \n\t\tRestart virtual network of profile name.\n
\n\trestart-dhcp, -rd <profile_name> \n\t\tRestart DHCP service for the profile name (virtual network). Use it when changes has been made to dnsmasq.\n
\n\tshow, show-profile, -sp <profile_name_optional> \n\t\tShow configurations of an existing profile.\n
\n\tnew, new-profile, -np <profile_name_optional> \n\t\tCreates a new profile.\n
\n\tedit, edit-profile, -ep <profile_name_optional> \n\t\tEdits an existing profile.\n
\n\texport, export-profile, -exp \n\t\tExports an existing profile.\n
\n\timport, import-profile, -imp \n\t\tImports an existing profile.\n
\n\tdelete, delete-profile, -dp \n\t\tDeletes an existing profile.\n
\n\trename, rename-profile, -rp <profile_name> <new_profile_name> \n\t\tRenames an existing profile.\n
\n\tedit-dhcp-config, -edc <profile_name> \n\t\tEdits dhcp config for the profile.\n
\n\tuninstall \n\t\tUninstalls and removes vnet from the host.\n
\n\t--show-install-dir \n\t\tDisplays the path where vnet tool is installed in.\n
\n  ▪ For Package mode:\n
\n\tinstall \n\t\tInstalls and setup vnet on the host.\n
\n\tupgrade \n\t\tUpgrades vnet with a newer version (if applicable) or for reinstalling vnet.\n
";
    echo -e $help | less; echo -e $help
    unset help
	exit 2
esac

exit $?
